extends layout

block content
    html.
        <head>
            <link rel="stylesheet" href="http://unpkg.com/@progress/kendo-theme-bootstrap/dist/all.css" />
            <script src="https://kendo.cdn.telerik.com/2022.3.913/js/kendo.all.min.js"></script>
        </head>
        <body style="padding: 10px">
            <div class="ui grid">
                <div class="row">
                    <div class="ui fifteen wide column">
                        <h2>Loans</h2>
                    </div>
                </div>
            </div>
            <br>
            <div class="ui positive message" style="display: none;">
                <div class="header" id="successMessage">
                </div>
            </div>
            <div class="ui negative message" style="display: none;">
                <div class="header">
                    Failed to add borrower
                </div>
                <p id="errorMessage"></p>
            </div>
            <div id="grid"></div>
        </body>

    script.
        var searchArray = [];

        $(document).ready(function() {
            $("#loansbutton").removeClass("lightgrey");
            $("#loansbutton").addClass("grey");

            var dataSource = new kendo.data.DataSource({
                transport: {
                    read: {
                        url: "http://localhost:4000/bookloans",
                        dataType: "json"
                    }
                },
                batch: false,
                schema: {
                    data: function(data) {
                        data = data.loans;

                        // Search handling
                        if(searchArray != null && searchArray.length > 0) {
                            var searchData = [];
                            var searchIsbns = [];
                            for(var i = 0; i < data.length; i++) {
                                var loan = data[i];
                                var search = $.merge([], searchArray);
                                
                                // Loan_id handling
                                const idIdx = $.inArray(loan.Loan_id.toString(), search);
                                if(idIdx > -1 && $.inArray(loan.Isbn, searchIsbns) === -1) {
                                    search.splice(idIdx, 1);
                                    searchData.push(loan);
                                    searchIsbns.push(loan.Isbn);
                                    continue;
                                }

                                // Isbn handling
                                const isbnIdx = $.inArray(loan.Isbn.toString(), search);
                                if(isbnIdx > -1 && $.inArray(loan.Isbn, searchIsbns) === -1) {
                                    search.splice(isbnIdx, 1);
                                    searchData.push(loan);
                                    searchIsbns.push(loan.Isbn);
                                    continue;
                                }

                                // Borrower handling
                                var split = loan.Bname.toLowerCase().split(/\s+/).filter(Boolean);
                            
                                var added = false;
                                for(var j = 0; j < search.length; j++) {
                                    for(var k = 0; k < split.length; k++) {
                                        if(search[j] == split[k] && $.inArray(loan.Isbn, searchIsbns) === -1) {
                                            search.splice(j, 1);
                                            searchData.unshift(loan);
                                            added = true;
                                            searchIsbns.push(loan.Isbn);
                                            break;
                                        }
                                    }
                                }
                                if(added) {
                                    continue;
                                }

                                // Check book if title is length 1
                                if(search.length == 1 && loan.Title.toLowerCase().indexOf(search[0]) > -1
                                    && $.inArray(loan.Isbn, searchIsbns) === -1) {
                                    searchData.push(loan);
                                    searchIsbns.push(loan.Isbn);
                                    continue;
                                }

                                // Title handling
                                added = false;
                                split = loan.Title.toLowerCase().split(/\s+/).filter(Boolean);
                                var isInString = new Array(split.length).fill(false);

                                for(var j = 0; j < split.length; j++) {
                                    if(split[j].indexOf(search[0]) > -1) {
                                        isInString[j] = true;
                                        search.splice(0, 1);
                                    }
                                }

                                var check = false;
                                for(var j = 0; j < isInString.length - 1; j++) {
                                    if(isInString[j]) {
                                        check = true;
                                        continue;
                                    } else if (!isInString[j] && check) {
                                        var trueFound = false;
                                        for(var k = j + 1; k < isInString.length; k++) {
                                            if(isInString[k]) {
                                                trueFound = true;
                                            }
                                        }

                                        if(trueFound) {
                                            check = false;
                                        }
                                    }
                                }

                                if(check && search.length === 0
                                    && $.inArray(loan.Isbn, searchIsbns) === -1) {
                                    searchData.push(loan);
                                    searchIsbns.push(loan.Isbn);
                                }
                            }
                            return searchData;
                        }

                        return data;
                    },
                    model: {
                        id: "Loan_id",
                        fields: {
                            Loan_id: { type:"string" },
                            Isbn: { type: "string" },
                            Bname: { type: "string" },
                            Borrower: { field: "Bname", type: "string"},
                            Date_out: {type: "date"},
                            Due_date: {type: "date"},
                            Date_in: {type: "date"}
                        }
                    }
                }
            });

            $("#grid").kendoGrid({
                dataSource: dataSource,
                height: 800,
                pageable: false,
                persistSelection: true,
                sortable: true,
                toolbar: [{template: '<span class="k-searchbox k-input k-input-md k-rounded-md k-input-solid"><span class="k-input-icon k-icon k-i-search"></span><input autocomplete="off" placeholder="Search..." title="Search..." aria-label="Search..." class="k-input-inner" id="searchbar"></span>'},
                    {template: '&nbsp;<div class="ui primary button" onclick="bulkCheckIn()">Bulk Check In</div>'}],
                columns: [
                    { selectable: true, width: "50px" },
                    { field: "Loan_id", title: "Loan ID", width: "150px" },
                    { field: "Isbn", title: "ISBN", width: "200px" },
                    { field: "Title", title: "Title", width: "500px" },
                    { field: "Borrower", title: "Borrower"},
                    { field: "Date_out", title: "Date Out", format: "{0:MM/dd/yyyy}" },
                    { field: "Due_date", title: "Due Date", format: "{0:MM/dd/yyyy}" },
                    { command: { text: "Check In", click: checkInBook }, title: ""}
                ],
            }).after(function () {
                $("#searchbar").keyup(function(e) {
                    e.preventDefault();
                    searchArray = $("#searchbar").val().toLowerCase().split(/\s+/).filter(Boolean);
                    $("#grid").data("kendoGrid").dataSource.read();
                });
            });

        });

        function checkInBook(e) {
            e.preventDefault();

            var dataItem = this.dataItem($(e.currentTarget).closest("tr"));

            var jsonData = {
                    "loanID": dataItem.Loan_id
                }            
            $.ajax({
                url: "http://localhost:4000/checkin",
                type: "POST",
                data: JSON.stringify(jsonData),
                dataType: "json",
                contentType: "application/json; charset=utf-8", 
                success: function(data) {
                    $(".positive.message").show();
                    if(!!data) {
                        $("#successMessage").html(data.message);
                    }

                    setTimeout(function () {
                        $(".positive.message").fadeOut();
                        $("#successMessage").html();
                    }, 5000);
                },
                error: function(data) {
                    $(".negative.message").show();
                    if(!!data) {
                        $("#errorMessage").html(data.responseJSON.error);
                    }

                    setTimeout(function () {
                        $(".negative.message").fadeOut();
                        $("#errorMessage").html();
                    }, 5000);
                }
            }).always(function () {
                $("#grid").data("kendoGrid").dataSource.read();
            });
        }

        function bulkCheckIn() {
            var keyNames = $("#grid").data("kendoGrid").selectedKeyNames();
            
            var success = true;
            var message = "Successful Check In!";
            keyNames.forEach(function (Loan_id) {     
                var jsonData = {
                    "loanID": Loan_id
                }            
                $.ajax({
                    url: "http://localhost:4000/checkin",
                    type: "POST",
                    data: JSON.stringify(jsonData),
                    dataType: "json",
                    async: false,
                    contentType: "application/json; charset=utf-8",
                    error: function(data) {
                        success = false;
                        message = data.responseJSON.error
                    }
                }).always(function () {
                    $("#grid").data("kendoGrid").dataSource.read();
                });
            });

            if(success) {
                $(".positive.message").show();
                $("#successMessage").html(message);

                setTimeout(function () {
                    $(".positive.message").fadeOut();
                    $("#successMessage").html();
                }, 5000);
            } else {
                $(".negative.message").show();
                $("#errorMessage").html(message);

                setTimeout(function () {
                    $(".negative.message").fadeOut();
                    $("#errorMessage").html();
                }, 5000);
            }
        }
        